import React, { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

import { useInvoiceStore } from "@/store/useInvoiceStore";
import { Message } from "@/components/organismes/Message"

import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";

import { Input } from "@/components/ui/input";
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import { Label } from "@/components/ui/label";
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";

const invoiceSchema = z.object({
  invoice_name: z.coerce.number().min(1, "Invoice number is required"),
  nb_hours: z.coerce.number().min(1.0, "At least 1 hour"),
  nb_students: z.coerce.number().min(1, "At least 1 student"),
  school_name: z.string().min(2, "School is required"),
  class_name: z.string().min(2, "Class group is required"),
  teacher_name: z.string().optional(),
  billed_at: z.coerce.date().optional(), // Date will be generated by FastAPI
  is_certifying: z.boolean(), 
});

type InvoiceFormData = z.infer<typeof invoiceSchema>;

export default function InvoiceForm() {
  const { data, current, setCurrent, createInvoiceOnApi, addInvoiceLocal } = useInvoiceStore();
  const [showMsg, setShowMsg] = useState(false)

  const form = useForm<InvoiceFormData>({
    resolver: zodResolver(invoiceSchema),
    mode: "onTouched",
    defaultValues: {
      invoice_name: 0,
      nb_hours: 1.0,
      nb_students: 1,
      school_name: "",
      class_name: "",
      teacher_name: "",
      billed_at: "",
      is_certifying: true,
    },
  })

  async function onSubmit(data: InvoiceFormData) {
    setCurrent(data)
    await createInvoiceOnApi() // ici on enregistre sur l'API
    form.reset()
    setShowMsg(true)
    useInvoiceStore.persist.clearStorage()
  }

  return (
    <div className="flex justify-center mt-10">
      {showMsg && (
        <Message
          message="Enregistré avec succès !"
          durationMs={3000}
          onClose={() => setShowMsg(false)}
        />
      )}
      <Card className="w-full max-w-md">
      <CardContent className="p-6">
        <p>last invoice number : {data[data.length - 1]?.invoice_name}</p>
        </CardContent>
        <CardContent className="p-6">
          <RadioGroup
            defaultValue={current.is_certifying ? "yes" : "no"}
            onValueChange={(value) =>
              setCurrent({ is_certifying: value === "yes" })
            }
            className="flex gap-6"
          >
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="yes" id="yes" />
              <Label htmlFor="yes">Certifiante</Label>
            </div>
            <div className="flex items-center space-x-2">
              <RadioGroupItem value="no" id="no" />
              <Label htmlFor="no">Non certifiante</Label>
            </div>
          </RadioGroup>
        </CardContent>
        <CardContent className="p-6">
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              {/* Invoice Number */}
              <FormField
                control={form.control}
                name="invoice_name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Invoice Number</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        min={1}
                        {...field}
                        onChange={(e) =>
                          field.onChange(parseInt(e.target.value, 10))
                        }
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Teaching Hours */}
              <FormField
                control={form.control}
                name="nb_hours"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Teaching Hours</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        {...field}
                        onChange={(e) =>
                          field.onChange(parseFloat(e.target.value))
                        }
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Student Count */}
              <FormField
                control={form.control}
                name="nb_students"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Student Count</FormLabel>
                    <FormControl>
                      <Input
                        type="number"
                        min={1}
                        {...field}
                        onChange={(e) =>
                          field.onChange(parseInt(e.target.value, 10))
                        }
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* School */}
              <FormField
                control={form.control}
                name="school_name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>School</FormLabel>
                    <FormControl>
                      <Input type="text" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Class Group */}
              <FormField
                control={form.control}
                name="class_name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Class Group</FormLabel>
                    <FormControl>
                      <Input type="text" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              {/* Teacher Name */}
              <FormField
                control={form.control}
                name="teacher_name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Teacher Name</FormLabel>
                    <FormControl>
                      <Input type="text" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="billed_at"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Billed At</FormLabel>
                    <FormControl>
                      <Input
                        type="date"
                        {...field}
                        value={field.value ? field.value.toISOString().substring(0, 10) : ""}
                        onChange={(e) => field.onChange(new Date(e.target.value))}
                      />
                    </FormControl>
                <FormMessage />
                </FormItem>
                )}
                />
              <Button type="submit" className="w-full">
                Submit
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}
